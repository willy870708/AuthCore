CREATE OR REPLACE FUNCTION FN_GET_PERMISSION_BY_CONDITION(
    I_USER_NUMBER IN VARCHAR,
    I_GRANTED_START_DATE IN VARCHAR,
    I_GRANTED_END_DATE IN VARCHAR,
    I_SYSTEM_ID IN INTEGER,
    I_PAGE_NO IN INT,
    I_PAGE_SIZE IN INT
)RETURNS TABLE (
    RESOURCE_ID INTEGER,
    SYSTEM_ID INTEGER,
    RESOURCE_NAME VARCHAR(100),
    RESOURCE_IDENTIFIER VARCHAR(255),
    DESCRIPTION VARCHAR(50),
    GRANTED_AT TIMESTAMP WITH TIME ZONE
)
LANGUAGE plpgsql
AS $$
DECLARE
    V_OFFSET INT;
BEGIN
    V_OFFSET := (GREATEST(1, I_PAGE_NO) - 1) * GREATEST(1, I_PAGE_SIZE);

    RETURN QUERY
        SELECT
            R.ID,
            R.SYSTEM_ID,
            R.RESOURCE_NAME,
            R.RESOURCE_IDENTIFIER,
            R.DESCRIPTION,
            P.GRANTED_AT
        FROM
            USERS U
            INNER JOIN USER_GROUPS UG ON U.ID = UG.USER_ID
            INNER JOIN GROUP_ROLES GR ON GR.GROUP_ID = UG.GROUP_ID
            INNER JOIN PERMISSIONS P ON P.ROLE_ID = GR.ROLE_ID
            INNER JOIN RESOURCES R ON R.ID = P.RESOURCE_ID
        WHERE
            U.USER_NUMBER = I_USER_NUMBER
            AND(
                I_GRANTED_START_DATE IS NULL OR P.GRANTED_AT >= TO_DATE(I_GRANTED_START_DATE, 'YYYY-MM-DD')
            )
            AND(
                I_GRANTED_END_DATE IS NULL OR P.GRANTED_AT <= TO_DATE(I_GRANTED_END_DATE, 'YYYY-MM-DD')
            )
            AND R.SYSTEM_ID = I_SYSTEM_ID
        ORDER BY
            P.GRANTED_AT DESC,
            R.ID ASC
        LIMIT I_PAGE_SIZE
        OFFSET V_OFFSET
  ;
END;
$$;

CREATE TYPE TYPE_PERMISSION_INPUT AS (
    ROLE_ID INTEGER,
    RESOURCE_ID INTEGER
);

CREATE OR REPLACE FUNCTION FN_ADD_PERMISSIONS(
    I_PERMISSIONS IN TYPE_PERMISSION_INPUT[]
)RETURNS INTEGER
LANGUAGE plpgsql
AS $$
DECLARE
    INSERT_ROWS INTEGER;
BEGIN
    INSERT INTO PERMISSIONS(
        ROLE_ID,
        RESOURCE_ID
    )
    SELECT
        P.ROLE_ID,
        P.RESOURCE_ID
    FROM
        UNNEST(I_PERMISSIONS) P
    ;
    GET DIAGNOSTICS INSERT_ROWS = ROW_COUNT;
    
    RETURN INSERT_ROWS;
END;
$$;
CREATE OR REPLACE FUNCTION FN_GET_PERMISSION_BY_USER_ID(
    I_USER_NUMBER IN VARCHAR
)RETURNS TABLE (
    RESOURCE_ID INTEGER,
    SYSTEM_ID INTEGER,
    RESOURCE_NAME VARCHAR(100),
	RESOURCE_IDENTIFIER VARCHAR(255),
	DESCRIPTION VARCHAR(50)
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
		SELECT
			R.ID,
			R.SYSTEM_ID,
			R.RESOURCE_NAME,
			R.RESOURCE_IDENTIFIER,
			R.DESCRIPTION
		FROM
			USERS U
			INNER JOIN USER_GROUPS UG ON U.ID = UG.USER_ID
			INNER JOIN GROUP_ROLES GR ON GR.GROUP_ID = UG.GROUP_ID
			INNER JOIN PERMISSIONS P ON P.ROLE_ID = GR.ROLE_ID
			INNER JOIN RESOURCES R ON R.ID = P.RESOURCE_ID
		WHERE
			U.USER_NUMBER = I_USER_NUMBER
  ;                             
END;
$$;

CREATE TYPE TYPE_PERMISSION_INPUT AS (
    ROLE_ID INTEGER,
    RESOURCE_ID INTEGER
);

CREATE OR REPLACE FUNCTION FN_ADD_PERMISSIONS(
    I_PERMISSIONS IN TYPE_PERMISSION_INPUT[]
)RETURNS INTEGER
LANGUAGE plpgsql
AS $$
DECLARE
	INSERT_ROWS INTEGER;
BEGIN
	INSERT INTO PERMISSIONS(
		ROLE_ID,
		RESOURCE_ID
	)
	SELECT
		P.ROLE_ID,
		P.RESOURCE_ID
	FROM
		UNNEST(I_PERMISSIONS) P
	;
	GET DIAGNOSTICS INSERT_ROWS = ROW_COUNT;
	
	RETURN INSERT_ROWS;
END;
$$;